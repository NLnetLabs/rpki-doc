# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2020, NLnet Labs (CC-BY 3.0)
# This file is distributed under the same license as the RPKI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RPKI \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-26 19:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../routinator/interactive.rst:4
msgid "Running Interactively"
msgstr ""

#: ../../routinator/interactive.rst:6
msgid ""
"Routinator can perform RPKI validation as a one-time operation and print "
"a Validated ROA Payload (VRP) list in various formats, or it can return "
"the validity of a specific announcement. These functions are accessible "
"on the command line via the following sub-commands:"
msgstr ""

#: ../../routinator/interactive.rst:13
msgid ":subcmd:`vrps`"
msgstr ""

#: ../../routinator/interactive.rst:12
msgid ""
"Fetches RPKI data and produces a Validated ROA Payload (VRP) list in the "
"specified format."
msgstr ""

#: ../../routinator/interactive.rst:17
msgid ":subcmd:`validate`"
msgstr ""

#: ../../routinator/interactive.rst:16
msgid ""
"Outputs the RPKI validity for a specific announcement by supplying "
"Routinator with an ASN and a prefix."
msgstr ""

#: ../../routinator/interactive.rst:20
msgid "Printing a List of VRPs"
msgstr ""

#: ../../routinator/interactive.rst:22
msgid ""
"Routinator can produce a Validated ROA Payload (VRP) list in many "
"different formats, which are either printed to standard output or saved "
"to a file:"
msgstr ""

#: ../../routinator/interactive.rst:30
msgid "csv"
msgstr ""

#: ../../routinator/interactive.rst:26
msgid ""
"The list is formatted as lines of comma-separated values of the prefix in"
" slash notation, the maximum prefix length, the autonomous system number,"
" and an abbreviation for the trust anchor the entry is derived from. The "
"latter is the name of the TAL file  without the extension *.tal*. This is"
" the default format used if the :option:`--format` or :option:`-f` option"
" is missing."
msgstr ""

#: ../../routinator/interactive.rst:35
msgid "csvcompat"
msgstr ""

#: ../../routinator/interactive.rst:33
msgid ""
"The same as csv except that all fields are embedded in double quotes and "
"the autonomous system number is given without the prefix AS. This format "
"is pretty much identical to the CSV produced by the RIPE NCC Validator."
msgstr ""

#: ../../routinator/interactive.rst:41
msgid "csvext"
msgstr ""

#: ../../routinator/interactive.rst:38
msgid ""
"This is an extended version of the *csv* format, which was used by the "
"RIPE NCC RPKI Validator 1.x. Each line contains these comma-separated "
"values: the rsync URI of the ROA the line is taken from (or \"N/A\" if it"
" isn't from a ROA), the autonomous system number, the prefix in slash "
"notation, the maximum prefix length, and lastly the not-before and not-"
"after date of the validity of the ROA."
msgstr ""

#: ../../routinator/interactive.rst:51
msgid "json"
msgstr ""

#: ../../routinator/interactive.rst:44
msgid ""
"The list is placed into a JSON object with a single  element *roas* which"
" contains an array of objects with four elements each: The autonomous "
"system number of  the  network  authorised to originate a prefix in "
"*asn*, the prefix in slash notation in *prefix*, the maximum prefix "
"length of the announced route in *maxLength*, and the trust anchor from "
"which the authorisation was derived in *ta*. This format is identical to "
"that produced by the RIPE NCC Validator except for different naming of "
"the trust anchor. Routinator uses the name of the TAL file without the "
"extension *.tal* whereas the RIPE NCC Validator has a dedicated name for "
"each."
msgstr ""

#: ../../routinator/interactive.rst:54
msgid "openbgpd"
msgstr ""

#: ../../routinator/interactive.rst:54
msgid ""
"Choosing  this format causes Routinator to produce a *roa-set* "
"configuration item for the OpenBGPD configuration."
msgstr ""

#: ../../routinator/interactive.rst:58
msgid "bird"
msgstr ""

#: ../../routinator/interactive.rst:57
msgid ""
"Choosing this format causes Routinator to produce a roa table "
"configuration item for the BIRD configuration."
msgstr ""

#: ../../routinator/interactive.rst:61
msgid "bird2"
msgstr ""

#: ../../routinator/interactive.rst:61
msgid ""
"Choosing this format causes Routinator to produce a route table "
"configuration item for the BIRD2 configuration."
msgstr ""

#: ../../routinator/interactive.rst:66
msgid "rpsl"
msgstr ""

#: ../../routinator/interactive.rst:64
msgid ""
"This format produces a list of RPSL objects with the authorisation in the"
" fields *route*, *origin*, and *source*. In addition, the fields *descr*,"
" *mnt-by*, *created*, and *last-modified*, are present with more or less "
"meaningful values."
msgstr ""

#: ../../routinator/interactive.rst:72
msgid "summary"
msgstr ""

#: ../../routinator/interactive.rst:69
msgid ""
"This format produces a summary of the content of the RPKI repository. For"
" each trust anchor, it will print the number of verified ROAs and VRPs. "
"Note that this format does not take filters into account. It will always "
"provide numbers for the complete repository."
msgstr ""

#: ../../routinator/interactive.rst:74
msgid "For example, to get the validated ROA payloads in CSV format, run:"
msgstr ""

#: ../../routinator/interactive.rst:88
msgid ""
"To generate a file with with the validated ROA payloads in JSON format, "
"run:"
msgstr ""

#: ../../routinator/interactive.rst:95
msgid "Filtering"
msgstr ""

#: ../../routinator/interactive.rst:97
msgid ""
"In case you are looking for specific information in the output, "
"Routinator allows filtering to see if a prefix or ASN is covered or "
"matched by a VRP. You can do this using the :option:`--filter-asn` and "
":option:`--filter-prefix` options."
msgstr ""

#: ../../routinator/interactive.rst:102
msgid ""
"When using :option:`--filter-asn`, you can use both ``AS64511`` and "
"``64511`` as the notation. With :option:`--filter-prefix`, the result "
"will include VRPs regardless of their ASN and MaxLength. Both filter "
"flags can be combined and used multiple times in a single query and will "
"be treated as a logical *\"or\"*."
msgstr ""

#: ../../routinator/interactive.rst:107
msgid ""
"A validation run will be started before returning the result, making sure"
" you get the latest information. If you would like a result from the "
"current cache, you can use the :option:`--noupdate` or :option:`-n` "
"option."
msgstr ""

#: ../../routinator/interactive.rst:111
msgid ""
"Here are some examples filtering for an ASN and prefix in CSV and JSON "
"format:"
msgstr ""

#: ../../routinator/interactive.rst:130
msgid "Validity Checker"
msgstr ""

#: ../../routinator/interactive.rst:132
msgid ""
"You can check the RPKI origin validation status of a specific BGP "
"announcement using the :subcmd:`validate` subcommand and by supplying the"
" ASN and prefix. A validation run will be started before returning the "
"result, making sure you get the latest information. If you would like a "
"result from the current cache, you can use the :option:`--noupdate` or "
":option:`-n` option."
msgstr ""

#: ../../routinator/interactive.rst:143
msgid ""
"A detailed analysis of the reasoning behind the validation outcome is "
"printed in JSON format. In case of an Invalid state, whether this because"
" the announcement is originated by an unauthorised AS, or if the prefix "
"is more specific than the maximum prefix length allows. Lastly, a "
"complete list of VRPs that caused the result is included."
msgstr ""

#: ../../routinator/interactive.rst:179
msgid ""
"If you run the HTTP service in daemon mode, this information is also "
"available at the ``/validity`` endpoint."
msgstr ""

